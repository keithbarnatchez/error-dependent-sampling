onestep <- mean(psi1hat - psi0hat)
onestepse <- sd(psi1hat - psi0hat)/sqrt(nrow(data))
return(list(plugin=plugin,pluginse=pluginse,
onestep=onestep,onestepse=onestepse,
maxl1=max(data$lambda_hat1),maxpi1=max(data$pi_hat1),
mink=min(kappa_hat),maxk=max(kappa_hat)))
}
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
# Get the one-step bias corrected estimate and its SE
psi1hat <- with(data,
(eta_hat1/pi_hat1 +
A*R*(Y-mu_hat1)/(kappa_hat*pi_hat1) +
(R*(A-lambda_hat1)/kappa_hat + lambda_hat1-pi_hat1)*
((mu_hat1-eta_hat1/pi_hat1)/pi_hat1)
)
)
# Estimate mu_a and lambda_a with the validation data
mu_a <- est_mu_a(data)
lambda_a <- est_lambda_a(data)
data=df
# Estimate mu_a and lambda_a with the validation data
mu_a <- est_mu_a(data)
lambda_a <- est_lambda_a(data)
# Append new predictions onto the dataframe
data <- cbind(data,mu_a,lambda_a)
# Regress mu_a and lambda_a predictions on X and Astar across the whole dataset
# to get eta_a predictions
eta_a <- est_eta_a(data)
data <- cbind(data,eta_a)
# Regress lambda_a predictions on X and Astar across the whole dataset
pi_a <- est_pi_a(data)
data <- cbind(data,pi_a)
# Get P(R=1|X,Ystar,Astar)
kappa_hat <- est_kappa(data)
# Get the plug-in estimate and its SE
plugin <- mean(data$eta_hat1/data$lambda_hat1) - mean(data$eta_hat0/data$lambda_hat0)
pluginse <- sd(data$eta_hat1/data$pi_hat1 - data$eta_hat0/data$pi_hat0)/sqrt(nrow(data))
# Get the one-step bias corrected estimate and its SE
psi1hat <- with(data,
(eta_hat1/pi_hat1 +
A*R*(Y-mu_hat1)/(kappa_hat*pi_hat1) +
(R*(A-lambda_hat1)/kappa_hat + lambda_hat1-pi_hat1)*
((mu_hat1-eta_hat1/pi_hat1)/pi_hat1)
)
)
View(data)
# Get the one-step bias corrected estimate and its SE
psi1hat <- with(data,
(eta_hat1/pi_hat1 +
A*R*(Y-mu_hat1)/(kappa_hat*pi_hat1) +
(R*(A-lambda_hat1)/kappa_hat + lambda_hat1-pi_hat1)*
((mu_hat1-eta_hat1/pi_hat1)/pi_hat1)
)
)
View(psi1hat)
View(psi1hat)
max(psi1hat)
min(psi1hat)
mean(psi1hat)
median(psi1hat)
psi0hat
# Now with A=0
psi0hat <- with(data,
(eta_hat0/pi_hat0 +
(1-A)*R*(Y-mu_hat0)/(kappa_hat*pi_hat0) +
(R*((1-A)-(1-lambda_hat0))/kappa_hat + (1-lambda_hat0)-pi_hat0)*
((mu_hat0-eta_hat0/pi_hat0)/pi_hat0)
)
)
mean(psi0hat)
median(psi0hat)
median(psi0hat)
median(psi1hat)
# Get the one-step bias corrected estimate and its SE
psi1hatold <- with(data,
(eta_hat1/pi_hat1 +
A*R*(Y-mu_hat1)/(kappa_hat*pi_hat1) +
(R*(A-lambda_hat1)/kappa_hat + lambda_hat1-pi_hat1)*
((mu_hat1-eta_hat1/pi_hat1)/pi_hat1)
)
)
psi1hat <- with(data,
eta_hat1/pi_hat1 +
(lambda_hat1/pi_hat1)*(mu_hat1 - eta_hat1/pi_hat1) +
(A*R/(kappa_hat*pi_hat1))*(Y - eta_hat1/pi_hat1) -
(R*lambda_hat1)/(kappa_hat*pi_hat1)*(mu_hat1 - eta_hat1/pi_hat1)
)
View(psi1hatold)
View(psi1hatold)
mean(psi1hat)
median(psi1hat)
# Now with A=0
psi0hatold <- with(data,
(eta_hat0/pi_hat0 +
(1-A)*R*(Y-mu_hat0)/(kappa_hat*pi_hat0) +
(R*((1-A)-(1-lambda_hat0))/kappa_hat + (1-lambda_hat0)-pi_hat0)*
((mu_hat0-eta_hat0/pi_hat0)/pi_hat0)
)
)
psi0hat <- with(data,
eta_hat0/pi_hat0 +
(lambda_hat0/pi_hat0)*(mu_hat0 - eta_hat0/pi_hat0) +
((1-A)*R/(kappa_hat*pi_hat0))*(Y - eta_hat0/pi_hat0) -
(R*lambda_hat0)/(kappa_hat*pi_hat0)*(mu_hat0 - eta_hat0/pi_hat0)
)
median(psi0hat)
mean(psi0hat)
kappa_hat*pi_hat1
ofg=with(data,kappa_hat*pi_hat1)
ofg
min(ofg)
max(ofg)
3.5/.004
.01*.01
source('estimation-functions.R')
source('data-functions.R')
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
source('data-functions.R')
#-------------------------------------------------------------------------------
# Test treatment effect estimation funcs
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
output
unlist(output)
source("~/Documents/research/me-dep-sampling/test-funcs.R", echo=TRUE)
source("~/Documents/research/me-dep-sampling/test-funcs.R", echo=TRUE)
source("~/Documents/research/me-dep-sampling/test-funcs.R", echo=TRUE)
View(psi_hat_df)
unlist(psi_hat)
names(unlist(psi_hat_df))
colnames(unlist(psi_hat_df))
rownames(unlist(psi_hat_df))
data.frame(unlist(psi_hat_df))
data.frame(unlist(psi_hat))
data.frame(t(unlist(psi_hat)))
colnames(psi_hat_df) <- colnames(data.frame(t(unlist(psi_hat))))
mean(psi_hat_df$plugin)
psi_hat_df <- as.data.frame(psi_hat_df)
mean(psi_hat_df$plugin)
mean(psi_hat_df$onetep)
mean(psi_hat_df$onestep)
median(psi_hat_df$onestep)
# sum
summary(psi_hat_df$onestep)
# sum
quantile(psi_hat_df$onestep,.9)
# sum
quantile(psi_hat_df$plugin,.9)
# sum
quantile(psi_hat_df$onestep,.8)
# sum
quantile(psi_hat_df$onestep,.6)
# keep only the plugin and onstep estimates and reshape to long format
psi_hat_df <- psi_hat_df %>% select(onestep,plugin) %>%
pivot_longer(cols = everything(), names_to = "estimator", values_to = "psi_hat")
View(psi_hat_df)
psi_hat_df_long <- psi_hat_df
View(psi_hat_df)
# make a ridgeplot of the estimates
psi_hat_df_long %>% ggplot(aes(x = psi_hat, y = estimator)) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5")
# make a ridgeplot of the estimates
psi_hat_df_long %>% ggplot(aes(x = psi_hat, group = estimator)) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5")
# make a ridgeplot of the estimates
psi_hat_df_long %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5")
# make a new version of dataframe that windsorizes the estimates if they exceed
# */- 10
psi_hat_df_long_windsor <- psi_hat_df_long %>%
mutate(psi_hat = ifelse(psi_hat > 10, 10, psi_hat)) %>%
mutate(psi_hat = ifelse(psi_hat < -10, -10, psi_hat))
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5")
# make a new version of dataframe that filters observations if they exceed 10 in abs
# value
psi_hat_df_long_windsor <- psi_hat_df_long %>% filter(abs(psi_hat) < 10)
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5")
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() + theme_bw()
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() + theme_bw() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat, y = as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none')
# make a new version of dataframe that filters observations if they exceed 10 in abs
# value
psi_hat_df_long_windsor <- psi_hat_df_long %>% filter(abs(psi_hat) < 10) %>%
mutate(estimator = case_when(estimator == 'onestep' ~ 'One step',
estimator == 'plugin' ~ 'Plug in'))
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5)
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='red')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
source("~/Documents/research/me-dep-sampling/test-funcs.R", echo=TRUE)
# make a ridgeplot of the estimates
psi_hat_df_long %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
# make a new version of dataframe that filters observations if they exceed 10 in abs
# value
psi_hat_df_long_windsor <- psi_hat_df_long %>% filter(abs(psi_hat) < 5) %>%
mutate(estimator = case_when(estimator == 'onestep' ~ 'One step',
estimator == 'plugin' ~ 'Plug in'))
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 1, omega = 0.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 1000, p = 3, tau = 2.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
# make a ridgeplot of the estimates
psi_hat_df_long_windsor %>% ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges() + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 10000, p = 3, tau = 2.5") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
n
n=1000
X <- gen_covariates(n,p)
probs <- trim(expit(as.matrix(X)%*%delta))
hist(probs)
probs <- trim(expit(as.matrix(cbind(X,Astar,Ystar))%*%eta))
A <- gen_treatment(X,delta)
Astar <- treatment_meas_model(A, X, omega)
Y <- outcome_model(A,X,beta,tau,gamma)
Ystar <- outcome_meas_model(A,X,nu)
probs <- trim(expit(as.matrix(cbind(X,Astar,Ystar))%*%eta))
hist(probs)
min(probs)
max(probs)
R <- gen_selection(X,Astar,Ystar,eta)
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
mu_hat <- est_mu_a(df)
lambda_hat <- est_lambda_a(df)
kappa_hat <- est_kappa(df)
# Estimate mu_a and lambda_a with the validation data
mu_a <- est_mu_a(data)
lambda_a <- est_lambda_a(data)
# Append new predictions onto the dataframe
data <- cbind(data,mu_a,lambda_a)
# Regress mu_a and lambda_a predictions on X and Astar across the whole dataset
# to get eta_a predictions
eta_a <- est_eta_a(data)
data <- cbind(data,eta_a)
data=df
# Estimate mu_a and lambda_a with the validation data
mu_a <- est_mu_a(data)
lambda_a <- est_lambda_a(data)
# Append new predictions onto the dataframe
data <- cbind(data,mu_a,lambda_a)
# Regress mu_a and lambda_a predictions on X and Astar across the whole dataset
# to get eta_a predictions
eta_a <- est_eta_a(data)
data <- cbind(data,eta_a)
# Regress lambda_a predictions on X and Astar across the whole dataset
pi_a <- est_pi_a(data)
data <- cbind(data,pi_a)
# Get P(R=1|X,Ystar,Astar)
kappa_hat <- est_kappa(data)
# Get the plug-in estimate and its SE
plugin <- mean(data$eta_hat1/data$lambda_hat1) - mean(data$eta_hat0/data$lambda_hat0)
pluginse <- sd(data$eta_hat1/data$pi_hat1 - data$eta_hat0/data$pi_hat0)/sqrt(nrow(data))
# Get the one-step bias corrected estimate and its SE
psi1hatold <- with(data,
(eta_hat1/pi_hat1 +
A*R*(Y-mu_hat1)/(kappa_hat*pi_hat1) +
(R*(A-lambda_hat1)/kappa_hat + lambda_hat1-pi_hat1)*
((mu_hat1-eta_hat1/pi_hat1)/pi_hat1)
)
)
psi1hat <- with(data,
eta_hat1/pi_hat1 +
(lambda_hat1/pi_hat1)*(mu_hat1 - eta_hat1/pi_hat1) +
(A*R/(kappa_hat*pi_hat1))*(Y - eta_hat1/pi_hat1) -
(R*lambda_hat1)/(kappa_hat*pi_hat1)*(mu_hat1 - eta_hat1/pi_hat1)
)
hist(psi1hat)
hist(pi_hat1)
hist(data$pi_hat1)
min(data$pi_hat0)
min(data$pi_hat1)
min(abs(pi_hat1))
min(abs(data$pi_hat1))
max(abs(data$pi_hat1))
hist(data$lambda_hat1)
min(data$lambda_hat1)
min(data$lambda_hat0)
hist(data$lambda_hat0)
Astar==A
mean(Astar==A)
mean(Astar[Astar==1]==A[Astar==1])
mean(Astar[Astar==0]==A[Astar==0])
est_pi_a <- function(data) {
#' Function for estimating
#'       E( P(A=a | X, Astar, Ystar, R=1) | X, Astar)
#'
#' Inputs
#' - data: A dataframe from gen_data() that has been augmented with the
#'        predicted lambda_hat values
#'
#' Outputs:
#' - A vector of predictions
# Regress lambda_hat on X and Astar with superlearner
rhsvars <- c(names(data)[grep("^X",names(data))],'Astar')
covs <- data %>% select(all_of(rhsvars))
# Need separate models for A=0 and A=1
# pi_1 = E(lambda_1 | X, Astar)
# Note: setting family to binomial since pi_a should be in (0,1)
pi_a_mod1 <- SuperLearner::SuperLearner(Y=data$lambda_hat1, X=covs,
SL.library = c("SL.mean","SL.glmnet","SL.glm","SL.step"),
family = binomial(), method = "method.NNLS", verbose = FALSE)
# pi_1 = E(lambda_0 | X, Astar) = E(1-lambda_1 | X, Astar)
pi_a_mod0 <- SuperLearner::SuperLearner(Y=data$lambda_hat0, X=covs,
SL.library = c("SL.mean","SL.glmnet","SL.glm","SL.step"),
family = binomial(), method = "method.NNLS", verbose = FALSE)
# Get the predicted values for the whole dataset
pi_hat1 <- predict(pi_a_mod1,
data,
onlySL=TRUE)$pred
pi_hat0 <- predict(pi_a_mod0,
data,
onlySL=TRUE)$pred
return(data.frame(pi_hat1,pi_hat0))
}
# test-funcs.R
#
# Testing code for data generating/estimation/simulation functions
#-------------------------------------------------------------------------------
rm(list=ls())
source('estimation-functions.R')
source('data-functions.R')
packages <- c("tidyverse","mvtnorm",'SuperLearner')
package_list <- rownames(installed.packages())
for (pkg in packages) {  # This should output the actual package names
if (!(pkg %in% package_list)) {
stop("Package '", pkg, "' not installed")
}
}
n <- 10000 ; p <- 3
delta <- c(-0.1,-0.6,-0.9)
nu <- c(0.1,-0.1,0.1)
beta <- c(1,2,-2)
tau <- 1
gamma <- rep(1,3) # c(0.5,2.1,-1.2)
eta <- c(0.6,-0.2,0.8,0.1,-0.3)
X <- gen_covariates(n,p)
A <- gen_treatment(X,delta)
Astar <- treatment_meas_model(A, X, omega)
Y <- outcome_model(A,X,beta,tau,gamma)
Ystar <- outcome_meas_model(A,X,nu)
R <- gen_selection(X,Astar,Ystar,eta)
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
#-------------------------------------------------------------------------------
# Test treatment effect estimation funcs
df <- gen_data(n,p,delta,nu,beta,gamma,eta,omega,tau)
output <- est_psi_a(df) ; output
