ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean difference')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
View(df_means)
View(adeff_data_all)
df_means <- loveplot_long %>%
group_by(no_ole, variable) %>%
summarise(mean_value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
mutate(variable = recode(variable,
'treated'='Treated',
'time_since_onset' = 'Time since onset',
'sex'='Female',
'rilfl'='Riluzole',
'edvfl' = 'Edaravone',
'AGE'='Age'))
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
varlist <- c('AGE','sex','treated','rilfl','edvfl','time_since_onset','delta_frs')
loveplot_df <- adeff_data_tables %>% select(c(varlist,'no_ole')) %>%
mutate(across(all_of(varlist),scale))
loveplot_long <- loveplot_df %>%
pivot_longer(cols = varlist,
names_to = "variable",
values_to = "value")
df_means <- loveplot_long %>%
group_by(no_ole, variable) %>%
summarise(mean_value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
mutate(variable = recode(variable,
'treated'='Treated',
'time_since_onset' = 'Time since onset',
'sex'='Female',
'rilfl'='Riluzole',
'edvfl' = 'Edaravone',
'AGE'='Age',
'delta_frs' = 'Delta FRS'))
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
View(df_means)
View(loveplot_df)
View(adeff_data_all)
final_frsr <- adeff_data_all %>% filter(AVISIT=='Week 24') %>% # only want baseline visits
select(USUBJID,AVAL) %>% rename(alsfrsr24=AVAL)
final_frsr <- adeff_data_all %>% filter(AVISIT=='Week 24') %>% # only want baseline visits
select(USUBJID,AVAL) %>% rename(alsfrsr24=AVAL)
### First pass: only look at baseline characteristics
adeff_data_tables <- adeff_data_all %>% filter(AVISIT=='Baseline') %>% # only want baseline visits
mutate(sex=as.numeric(SEX=='F'),
sitegroup=as.factor(SITEGR1),
treated=as.numeric(ARM!='Placebo'),
rilfl=as.numeric(RILFL=='Y'),
edvfl=as.numeric(EDVFL=='Y'),
alsloc=as.factor(ALSLOC),
time_since_onset=SXBLDURM)
adeff_data_tables <- right_join(final_frsr,adeff_data_tables, by="USUBJID") %>%
mutate(decline=alsfrsr24-AVAL)
varlist <- c('AGE','sex','treated','rilfl','edvfl','time_since_onset','delta_frs')
loveplot_df <- adeff_data_tables %>% select(c(varlist,'no_ole')) %>%
mutate(across(all_of(varlist),scale))
loveplot_long <- loveplot_df %>%
pivot_longer(cols = varlist,
names_to = "variable",
values_to = "value")
df_means <- loveplot_long %>%
group_by(no_ole, variable) %>%
summarise(mean_value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
mutate(variable = recode(variable,
'treated'='Treated',
'time_since_onset' = 'Time since onset',
'sex'='Female',
'rilfl'='Riluzole',
'edvfl' = 'Edaravone',
'AGE'='Age',
'delta_frs' = 'Delta FRS'))
df_means <- loveplot_long %>%
group_by(no_ole, variable) %>%
summarise(mean_value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
mutate(variable = recode(variable,
'treated'='Treated',
'time_since_onset' = 'Time since onset',
'sex'='Female',
'rilfl'='Riluzole',
'edvfl' = 'Edaravone',
'AGE'='Age',
'decline' = 'ALSFRS-R Decline'))
final_frsr <- adeff_data_all %>% filter(AVISIT=='Week 24') %>% # only want baseline visits
select(USUBJID,AVAL) %>% rename(alsfrsr24=AVAL)
### First pass: only look at baseline characteristics
adeff_data_tables <- adeff_data_all %>% filter(AVISIT=='Baseline') %>% # only want baseline visits
mutate(sex=as.numeric(SEX=='F'),
sitegroup=as.factor(SITEGR1),
treated=as.numeric(ARM!='Placebo'),
rilfl=as.numeric(RILFL=='Y'),
edvfl=as.numeric(EDVFL=='Y'),
alsloc=as.factor(ALSLOC),
time_since_onset=SXBLDURM)
adeff_data_tables <- right_join(final_frsr,adeff_data_tables, by="USUBJID") %>%
mutate(decline=alsfrsr24-AVAL)
varlist <- c('AGE','sex','treated','rilfl','edvfl','time_since_onset','decline',
'alsfrsr24')
loveplot_df <- adeff_data_tables %>% select(c(varlist,'no_ole')) %>%
mutate(across(all_of(varlist),scale))
loveplot_long <- loveplot_df %>%
pivot_longer(cols = varlist,
names_to = "variable",
values_to = "value")
df_means <- loveplot_long %>%
group_by(no_ole, variable) %>%
summarise(mean_value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
mutate(variable = recode(variable,
'treated'='Treated',
'time_since_onset' = 'Time since onset',
'sex'='Female',
'rilfl'='Riluzole',
'edvfl' = 'Edaravone',
'AGE'='Age',
'decline' = 'ALSFRS-R Decline',
'alsfrsr24' = 'Week 24 ALSFRS-R'))
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom') +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 14)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 4)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
14
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 14)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
# Step 3: Plot the mean values
ggplot(df_means, aes(x = mean_value, y = variable, color = as.factor(no_ole))) +
geom_point(size = 1.5) +
labs(x = "Mean Value", y = "Variable", color = "Group") +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 6)) +
geom_vline(xintercept = c(-0.1,0.1),linetype='dashed') +
labs(color='Dropped out before OLE',
x='Standardized mean',
title='Characteristics of subjects',
subtitle='OLE vs no OLE')
1 %% 1
1 %% 5
1 %% 100
source("~/Documents/research/me-dep-sampling/sim-main.R", echo=TRUE)
setwd("~/Documents/research/me-dep-sampling")
source("~/Documents/research/me-dep-sampling/sim-main.R", echo=TRUE)
Sys.info()['sysname'] == 'Linux'
set.seed(123)  # For reproducibility
n = 100  # Number of points
X = rnorm(n, 10, 5)
Y = rnorm(n, 10, 5)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "blue", "Negative" = "red")) +
theme_minimal() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)")
# keep only the plug-in and one-step estimates and reshape to long format
psi_hat_df_long <- psi_hat_df %>% select(onestep,plugin) %>%
pivot_longer(cols = everything(),
names_to = "estimator", values_to = "psi_hat") %>%
mutate(estimator = case_when(estimator == 'onestep' ~ 'One step',
estimator == 'plugin' ~ 'Plug in'))
# Form the plot (distributions of estimates across sim iterations, by estimator)
psi_hat_df_long  %>%
ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges(alpha=0.8) + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 2500") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
set.seed(123)  # For reproducibility
n = 100  # Number of points
X = rnorm(n, 10, 5)
Y = rnorm(n, 10, 5)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "blue", "Negative" = "red")) +
theme_minimal() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)")
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)")
set.seed(123)  # For reproducibility
n = 30  # Number of points
X = rnorm(n, 10, 5)
Y = rnorm(n, 10, 5)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)")
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0)
set.seed(123)  # For reproducibility
n = 30  # Number of points
X = rnorm(n, 10, 5)
Y = X + rnorm(n, 10, 5)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0)
set.seed(123)  # For reproducibility
n = 30  # Number of points
X = rnorm(n, 10, 5)
Y = 0.5*X + rnorm(n, 10, 5)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "none")
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "bottom")
set.seed(123)  # For reproducibility
n = 30  # Number of points
X = rnorm(n, 10, 5)
Y = 0.2*X + rnorm(n, 10, 5)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "bottom")
set.seed(123)  # For reproducibility
n = 30  # Number of points
X = rnorm(n)
Y = 0.2*X + rnorm(n)
# Center the data
X_centered = X - mean(X)
Y_centered = Y - mean(Y)
# Determine the sign of the contribution to the correlation
sign_correlation = ifelse(X_centered * Y_centered > 0, "Positive", "Negative")
# Create a data frame
data = data.frame(X_centered, Y_centered, sign_correlation)
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)") +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "bottom")
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Mean Centered Values with Correlation Contribution",
x = "X (centered)", y = "Y (centered)",
color='Correlation contribution') +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "bottom")
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Each point'contribution to correlation",
x = "X (centered)", y = "Y (centered)",
color='Correlation contribution') +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "bottom")
# Plot
ggplot(data, aes(x = X_centered, y = Y_centered, color = sign_correlation)) +
geom_point() +
scale_color_manual(values = c("Positive" = "steelblue", "Negative" = "salmon")) +
theme_bw() +
labs(title = "Each point's contribution to correlation",
x = "X (centered)", y = "Y (centered)",
color='Correlation contribution') +
geom_vline(xintercept = 0) + geom_hline(yintercept = 0) +
theme(legend.position = "bottom")
shiny::runApp('~/Documents/teaching/power-visualization')
runApp('~/Documents/teaching/power-visualization')
runApp('~/Documents/teaching/power-visualization')
dnorm(1:100)
runApp('~/Documents/teaching/power-visualization')
runApp('~/Documents/teaching/power-visualization')
runApp('~/Documents/teaching/power-visualization')
runApp('~/Documents/teaching/power-visualization')
runApp('~/Documents/teaching/power-visualization')
# Form the plot (distributions of estimates across sim iterations, by estimator)
psi_hat_df_long  %>%
ggplot(aes(x = psi_hat,
y = as.factor(estimator),
fill=as.factor(estimator))) +
geom_density_ridges(alpha=0.8) + theme_ridges() +
labs(title = "Distribution of treatment effect estimates",
subtitle = "n = 2500") +
labs(x='Estimate',
y='Method') +
theme(legend.position = 'none') +
geom_vline(xintercept=2.5,color='black',linetype='dashed')
15*.25*.75
rho <- (1:5)/10
rho
